<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
          http://www.springframework.org/schema/security
          http://www.springframework.org/schema/security/spring-security-4.1.xsd">
    <!--auto-config= true  默认使用springsecurity 的表单页面-->
<!--    <security:http auto-config="true">
        &lt;!&ndash;定义各资源访问的权限&ndash;&gt;
        <security:intercept-url pattern="/**" access="hasRole('ROLE_USER')"/>
    </security:http>-->


    <!-- 表示匿名用户可以访问login.jsp -->
    <security:http security="none" pattern="/login.jsp" />
    <!--配置自定义登录界面-->
    <security:http auto-config="true">
        <security:form-login login-page="/login.jsp"
                             login-processing-url="/login.do"
                             username-parameter="username" password-parameter="password"
                             default-target-url="/target.jsp" always-use-default-target="true"
                             authentication-failure-url="/faile.jsp"/> <!--验证失败返回的页面-->
        <!-- 表示匿名用户可以访问login.jsp -->
        <security:intercept-url pattern="/login.jsp" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <!--user 用户访问其他所有资源-->
        <security:intercept-url pattern="/**" access="hasRole('ROLE_USER')" />
        <security:csrf disabled="true" />
    </security:http>


 <!--   <security:http auto-config="true">
        <security:http-basic/>
        <security:intercept-url pattern="/**" access="hasRole('ROLE_USER')" />
    </security:http>-->


    <!-- 定义authenticationManager ，处理来自于框架其他部分的认证请求-->
    <security:authentication-manager>
        <!--定义一个authenticationProvider来进行真正的认证，AuthenticationManager 是通过它来认证用户的-->
        <security:authentication-provider>
            <!--支持两种方式的user元素的定义方式  uesrDetails对应的就是 user-service元素
            跟 AuthenticationProvider 关系密切，用来获取用户信息的。
            -->
            <!--直接定义-->
            <security:user-service>
                <security:user name="user" password="user" authorities="ROLE_USER"/>
                <security:user name="admin" password="admin" authorities="ROLE_USER, ROLE_ADMIN"/>
            </security:user-service>
            <!--通过配置文件-->
           <!-- <security:user-service properties="/WEB-INF/config/users.properties"/>-->
        </security:authentication-provider>
    </security:authentication-manager>


</beans>